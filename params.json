{"name":"xpstart","tagline":"A script for a better x-plane start","body":"# User documentation\r\n\r\n## Description\r\nIn X-Plane 10 the way all sceneries are organized had changed to the previous versions. The order how the sceneries are loaded is stored in the file `scenery_packs.ini`. Usually everything works fine without conflicts, but the more different kind of sceneries are installed the order in that file has to be changed.\r\n\r\nSpecially with better OpenStreeMap data there are more automatic generated sceneries, which can cause more and more conflicts. To take care about the correct order the xpstart has been developed. \r\n\r\nxpstart analyses all your sceneries and groups them. After that it updates the `scenery_packs.ini` file. Everything works automatically.\r\n\r\n## Installation\r\n\r\n* Make sure that python is installed. [How to install Python](https://wiki.python.org/moin/BeginnersGuide/Download).\r\n* Copy the `xpstart.py` file and the `xpstart` folder into your x-plane folder. If your operating system is Linux or Mac, make sure that the xpstart directory is writeable.\r\n* Ready\r\n\r\n## Usage\r\n\r\n* When you install a new scenery, you copy the scenery into your custom scenery folder\r\n* Then run the xpstart.py script\r\n* Start or restart x-plane\r\n* Ready\r\n\r\n## Comming features\r\n\r\n* In future xpstart can be used to start x-plane. xpstart takes care about the sceneries, updated the scenery_packs.ini file and starts afterwards x-plane. That feature is not part of the first demo version.\r\n\r\n# Scenery developer documentation\r\n## Power to the scenery developer\r\nInside x-plane the scenery developer were never able to define, when his scenery should be loaded. Until XP9 it was always the alphabetic order of the folder names. That was a good way until the scenery was renamed. With XP 10 there is no such possibility any more. Therefore xpstart gives the scenery developer the possibility to define, which kind of scenery it is and when it should be loaded.\r\n\r\nDuring the support process it is not necessary to describe, how the user should deal with the scenery_packs.ini file. Just recommend to install xpstart and the conflicts should be gone.\r\n\r\n## How to support xpstart?\r\nThe xpstart algorithm is able to find a default layer for your scenery. But to make sure that xpstart uses the correct layer you can define the layer inside of your scenery. For that you need to add a simple text file with the name `scenery.txt` to your scenery folder. Same place where you put the `library.txt`. Inside the scenery.txt file you can define the layer with the command `LAYERGROUP`. \r\n\r\n## Layers\r\n\r\nFollowing layers are supported by xpstart at the moment:\r\n\r\n* **library**: A library is part of the custom scenery folder. It just has objects inside, which can be used by other sceneries. These is the only group where it doesn't matter when it is loaded.\r\n* **ground**: Defines the ground mesh of the x-plane world. If there would be a custom scenery just with a mesh inside it should be loaded with that group.\r\n* **texture**: The photot sceneries e.g. from simheaven.com, are sceneries just with textures inside. \r\n* **autogen**: Automatic generated sceneries mostly from OpenStreetMap.\r\n* **default**: The x-plane default sceneries.\r\n* **exclusion**: Exclusion sceneries just have exclusions inside. These sceneries are necessary, when a custom scenery don't have any exclusions. That there will be no conflict it is the easiest way to make a scenery just with exclusions inside.\r\n* **custom**: Custom sceneries for airports or other landmarks.\r\n\r\n## Examples\r\n\r\nThe scenery for an airport would be the layer _custom_. Therefore the content of the scenery.txt file would be:   \r\n`LAYERGROUP custom`\r\n\r\nAn automatic generated scenery with the tool [osm2xp](http://osm2xp.com/) would be the layer _autogen_.   \r\n`LAYERGROUP autogen`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}